/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CoCon"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT TV_init, mic01, mic02, mic03, mic04, mic05, mic06, mic07, mic08, mic09, mic10, 
mic11, mic12, mic13, mic14, mic15, mic16, mic17, mic18, mic19, mic20, mic21, mic22;
// ANALOG_INPUT
STRING_INPUT TV_RX[2000];
// BUFFER_INPUT 

DIGITAL_OUTPUT mic01fb, mic02fb, mic03fb, mic04fb, mic05fb, mic06fb, mic07fb, mic08fb, mic09fb, 
mic10fb, mic11fb, mic12fb, mic13fb, mic14fb, mic15fb, mic16fb, mic17fb, mic18fb, mic19fb, mic20fb, 
mic21fb, mic22fb, MicChanged, CoConConnect;
STRING_OUTPUT TV_TX, CoconTX;
ANALOG_OUTPUT LastSeat;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT CoconClient[10];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER TV_IP[15], seat01[2], seat02[2], seat03[2], seat04[2], seat05[2], seat06[2], seat07[2], seat08[2], 
seat09[2], seat10[2], seat11[2], seat12[2], seat13[2], seat14[2], seat15[2], seat16[2], seat17[2], seat18[2], 
seat19[2], seat20[2], seat21[2], seat22[2];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING ConnectionID[36], Trailer[100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function Notify()
{
	TV_TX = "GET /CoCon/Notification/id=" + ConnectionID + Trailer;
}
 
Function MicOn(STRING Seat)
{
	if (Len(ConnectionID)<>0)
	{
		CoConConnect = 1;
		Delay(5);
		CoconTX = "GET /CoCon/Microphone/SetState/?State=On&SeatNr=" + Seat + Trailer;
		CoConConnect = 0;
	}
}

Function MicOff(STRING Seat)
{
	if (Len(ConnectionID)<>0)
	{
		CoConConnect = 1;
		Delay(5);
		CoconTX = "GET /CoCon/Microphone/SetState/?State=Off&SeatNr=" + Seat + Trailer;
		CoConConnect = 0;
	}
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH TV_init
{
	if (Len(ConnectionID)=0)
	{
		Trailer = " HTTP/1.1\r\nHost: " + TV_IP + "\r\nContent-Length: 0\r\n\r\n";
		TV_TX = "GET /CoCon/Connect" + Trailer;
	}
}

PUSH mic01
{
	if (mic01fb=0)	MicOn(seat01); else MicOff(seat01);
}
PUSH mic02
{
	if (mic02fb=0)	MicOn(seat02); else MicOff(seat02);
}
PUSH mic03
{
	if (mic03fb=0)	MicOn(seat03); else MicOff(seat03);
}
PUSH mic04
{
	if (mic04fb=0)	MicOn(seat04); else MicOff(seat04);
}
PUSH mic05
{
	if (mic05fb=0)	MicOn(seat05); else MicOff(seat05);
}
PUSH mic06
{
	if (mic06fb=0)	MicOn(seat06); else MicOff(seat06);
}
PUSH mic07
{
	if (mic07fb=0)	MicOn(seat07); else MicOff(seat07);
}
PUSH mic08
{
	if (mic08fb=0)	MicOn(seat08); else MicOff(seat08);
}
PUSH mic09
{
	if (mic09fb=0)	MicOn(seat09); else MicOff(seat09);
}
PUSH mic10
{
	if (mic10fb=0)	MicOn(seat10); else MicOff(seat10);
}
PUSH mic11
{
	if (mic11fb=0)	MicOn(seat11); else MicOff(seat11);
}
PUSH mic12
{
	if (mic12fb=0)	MicOn(seat12); else MicOff(seat12);
}
PUSH mic13
{
	if (mic13fb=0)	MicOn(seat13); else MicOff(seat13);
}
PUSH mic14
{
	if (mic14fb=0)	MicOn(seat14); else MicOff(seat14);
}
PUSH mic15
{
	if (mic15fb=0)	MicOn(seat15); else MicOff(seat15);
}
PUSH mic16
{
	if (mic16fb=0)	MicOn(seat16); else MicOff(seat16);
}
PUSH mic17
{
	if (mic17fb=0)	MicOn(seat17); else MicOff(seat17);
}
PUSH mic18
{
	if (mic18fb=0)	MicOn(seat18); else MicOff(seat18);
}
PUSH mic19
{
	if (mic19fb=0)	MicOn(seat19); else MicOff(seat19);
}
PUSH mic20
{
	if (mic20fb=0)	MicOn(seat20); else MicOff(seat20);
}
PUSH mic21
{
	if (mic21fb=0)	MicOn(seat21); else MicOff(seat21);
}
PUSH mic22
{
	if (mic22fb=0)	MicOn(seat22); else MicOff(seat22);
}




CHANGE TV_RX
{
	STRING ParseString[100], SeatNr[2];
	INTEGER Pos, mic01tmp, mic02tmp, mic03tmp, mic04tmp, mic05tmp, mic06tmp, mic07tmp, mic08tmp, mic09tmp, mic10tmp, mic11tmp,
mic12tmp, mic13tmp, mic14tmp, mic15tmp, mic16tmp, mic17tmp, mic18tmp, mic19tmp, mic20tmp, mic21tmp, mic22tmp, changed;

	ParseString = Mid(TV_RX, 10, 3);
	if (ParseString = "200")
	{
		ParseString = Right(TV_RX, Len(TV_RX)-Find("{", TV_RX)-2);
		
		if (Left(ParseString, 7) = "Connect")
		{
			ConnectionID = Mid(TV_RX, Find("id", TV_RX)+7, 36);
			TV_TX = "GET /CoCon/Microphone/GetState" + Trailer;
		}

		else if ((Left(ParseString, 8) = "GetState")||(Left(ParseString, 15) = "MicrophoneState"))
		{
			changed = 0;
			mic01tmp = 0;
			mic02tmp = 0;
			mic03tmp = 0;
			mic04tmp = 0;
			mic05tmp = 0;
			mic06tmp = 0;
			mic07tmp = 0;
			mic08tmp = 0;
			mic09tmp = 0;
			mic10tmp = 0;
			mic11tmp = 0;
			mic12tmp = 0;
			mic13tmp = 0;
			mic14tmp = 0;
			mic15tmp = 0;
			mic16tmp = 0;
			mic17tmp = 0;
			mic18tmp = 0;
			mic19tmp = 0;
			mic20tmp = 0;
			mic21tmp = 0;
			mic22tmp = 0;
			Pos = Find(":[", ParseString)+2;
			SeatNr="";

			While (Mid(ParseString, Pos, 1)<>"]")
			{
				SeatNr = "";
				if (Mid(ParseString, Pos, 1)=",") Pos=Pos + 1;
				SeatNr = Mid(ParseString, Pos, 1);
				Pos = Pos + 1;
				if ((Mid(ParseString, Pos, 1)<>"]")&&(Mid(ParseString, Pos, 1)<>","))
				{
					SeatNr = SeatNr + Mid(ParseString, Pos, 1);
					Pos = Pos + 1;
				}
				if (SeatNr=Seat01) mic01tmp = 1;
				else if (SeatNr=Seat02) mic02tmp = 1;
				else if (SeatNr=Seat03) mic03tmp = 1;
				else if (SeatNr=Seat04) mic04tmp = 1;
				else if (SeatNr=Seat05) mic05tmp = 1;
				else if (SeatNr=Seat06) mic06tmp = 1;
				else if (SeatNr=Seat07) mic07tmp = 1;
				else if (SeatNr=Seat08) mic08tmp = 1;
				else if (SeatNr=Seat09) mic09tmp = 1;
				else if (SeatNr=Seat10) mic10tmp = 1;
				else if (SeatNr=Seat11) mic11tmp = 1;
				else if (SeatNr=Seat12) mic12tmp = 1;
				else if (SeatNr=Seat13) mic13tmp = 1;
				else if (SeatNr=Seat14) mic14tmp = 1;
				else if (SeatNr=Seat15) mic15tmp = 1;
				else if (SeatNr=Seat16) mic16tmp = 1;
				else if (SeatNr=Seat17) mic17tmp = 1;
				else if (SeatNr=Seat18) mic18tmp = 1;
				else if (SeatNr=Seat19) mic19tmp = 1;
				else if (SeatNr=Seat20) mic20tmp = 1;
				else if (SeatNr=Seat21) mic21tmp = 1;
				else if (SeatNr=Seat22) mic22tmp = 1;
			}
			if ((mic01tmp<>mic01fb)&&(mic01tmp=1)) {mic01fb = 1; changed = 1;} else if ((mic01tmp<>mic01fb)&&(mic01tmp=0)) {mic01fb = 0; changed = 1;}
			if ((mic02tmp<>mic02fb)&&(mic02tmp=1)) {mic02fb = 1; changed = 1;} else if ((mic02tmp<>mic02fb)&&(mic02tmp=0)) {mic02fb = 0; changed = 1;}
			if ((mic03tmp<>mic03fb)&&(mic03tmp=1)) {mic03fb = 1; changed = 1;} else if ((mic03tmp<>mic03fb)&&(mic03tmp=0)) {mic03fb = 0; changed = 1;}
			if ((mic04tmp<>mic04fb)&&(mic04tmp=1)) {mic04fb = 1; changed = 1;} else if ((mic04tmp<>mic04fb)&&(mic04tmp=0)) {mic04fb = 0; changed = 1;}
			if ((mic05tmp<>mic05fb)&&(mic05tmp=1)) {mic05fb = 1; changed = 1;} else if ((mic05tmp<>mic05fb)&&(mic05tmp=0)) {mic05fb = 0; changed = 1;}
			if ((mic06tmp<>mic06fb)&&(mic06tmp=1)) {mic06fb = 1; changed = 1;} else if ((mic06tmp<>mic06fb)&&(mic06tmp=0)) {mic06fb = 0; changed = 1;}
			if ((mic07tmp<>mic07fb)&&(mic07tmp=1)) {mic07fb = 1; changed = 1;} else if ((mic07tmp<>mic07fb)&&(mic07tmp=0)) {mic07fb = 0; changed = 1;}
			if ((mic08tmp<>mic08fb)&&(mic08tmp=1)) {mic08fb = 1; changed = 1;} else if ((mic08tmp<>mic08fb)&&(mic08tmp=0)) {mic08fb = 0; changed = 1;}
			if ((mic09tmp<>mic09fb)&&(mic09tmp=1)) {mic09fb = 1; changed = 1;} else if ((mic09tmp<>mic09fb)&&(mic09tmp=0)) {mic09fb = 0; changed = 1;}
			if ((mic10tmp<>mic10fb)&&(mic10tmp=1)) {mic10fb = 1; changed = 1;} else if ((mic10tmp<>mic10fb)&&(mic10tmp=0)) {mic10fb = 0; changed = 1;}
			if ((mic11tmp<>mic11fb)&&(mic11tmp=1)) {mic11fb = 1; changed = 1;} else if ((mic11tmp<>mic11fb)&&(mic11tmp=0)) {mic11fb = 0; changed = 1;}
			if ((mic12tmp<>mic12fb)&&(mic12tmp=1)) {mic12fb = 1; changed = 1;} else if ((mic12tmp<>mic12fb)&&(mic12tmp=0)) {mic12fb = 0; changed = 1;}
			if ((mic13tmp<>mic13fb)&&(mic13tmp=1)) {mic13fb = 1; changed = 1;} else if ((mic13tmp<>mic13fb)&&(mic13tmp=0)) {mic13fb = 0; changed = 1;}
			if ((mic14tmp<>mic14fb)&&(mic14tmp=1)) {mic14fb = 1; changed = 1;} else if ((mic14tmp<>mic14fb)&&(mic14tmp=0)) {mic14fb = 0; changed = 1;}
			if ((mic15tmp<>mic15fb)&&(mic15tmp=1)) {mic15fb = 1; changed = 1;} else if ((mic15tmp<>mic15fb)&&(mic15tmp=0)) {mic15fb = 0; changed = 1;}
			if ((mic16tmp<>mic16fb)&&(mic16tmp=1)) {mic16fb = 1; changed = 1;} else if ((mic16tmp<>mic16fb)&&(mic16tmp=0)) {mic16fb = 0; changed = 1;}
			if ((mic17tmp<>mic17fb)&&(mic17tmp=1)) {mic17fb = 1; changed = 1;} else if ((mic17tmp<>mic17fb)&&(mic17tmp=0)) {mic17fb = 0; changed = 1;}
			if ((mic18tmp<>mic18fb)&&(mic18tmp=1)) {mic18fb = 1; changed = 1;} else if ((mic18tmp<>mic18fb)&&(mic18tmp=0)) {mic18fb = 0; changed = 1;}
			if ((mic19tmp<>mic19fb)&&(mic19tmp=1)) {mic19fb = 1; changed = 1;} else if ((mic19tmp<>mic19fb)&&(mic19tmp=0)) {mic19fb = 0; changed = 1;}
			if ((mic20tmp<>mic20fb)&&(mic20tmp=1)) {mic20fb = 1; changed = 1;} else if ((mic20tmp<>mic20fb)&&(mic20tmp=0)) {mic20fb = 0; changed = 1;}
			if ((mic21tmp<>mic21fb)&&(mic21tmp=1)) {mic21fb = 1; changed = 1;} else if ((mic21tmp<>mic21fb)&&(mic21tmp=0)) {mic21fb = 0; changed = 1;}
			if ((mic22tmp<>mic22fb)&&(mic22tmp=1)) {mic22fb = 1; changed = 1;} else if ((mic22tmp<>mic22fb)&&(mic22tmp=0)) {mic22fb = 0; changed = 1;}
			LastSeat = AtoI(SeatNr);
			Delay(80);
			if (changed) 
			{
				MicChanged = 1;
				MicChanged = 0;
			}
		}

		Notify();
	}
	else if (ParseString = "408")
	{
		Notify();
	}
	else if (ParseString = "400")
	{
		TV_TX = "GET /CoCon/Connect" + Trailer;
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
}

 */
